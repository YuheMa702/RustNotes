### Creating a Project with Cargo ###

$ cargo new hello_cargo // create a new dir
$ cd hello_cargo // see a Cargo.toml and a src dir with a main.rs inside

cargo also creates a new Git repo with a .gitignore file (use -vcs for no version control) 

Note:
1. TOML stands for Tom's Obvious, Minimal Language = Cargo's configuration format
	- [package] : name, version, and edition of Rust are needed for Cargo to compile code
	- [dependencies] : packages of code in Rust are called crates
2. Cargo expect source files to live inside the src directory
	- top-level dir is for README, license info, config files, anything not related to code

### Build and Run a Cargo Project ###

$ cargo build // generate an exe file in target/debug/hello_cargo
$ ./target/debug/hello_cargo // run the exe
$ cargo run // run the exe, would recompile if see changes
$ cargo check // check if program compiles without creating an exe

Note:
1. Run cargo build for the first time will gen a Cargo.lock file at top level
	- it keeps track of the exact versions of dependencies
2. cargo check much faster than cargo run
3. cargo is cross-platform, the commands are exact the same!

### Building for Release ###

$ cargo build --release // takes long time but optimize exe, in target/release

### Cargo as Convention ###

For any Rust Project:
$ git clone example.org/someproject
$ cd someproject
$ cargo build
